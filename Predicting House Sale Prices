{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true
   },
   "source": [
    "# Predicting Housing Prices Using Linear Regression"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The dataset we will be using in this project contains information on houses that were sold in Ames, Iowa from 2006-2010. The goal will be to use linear regression to make a model to predict the prices of new houses given the houses' features."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.linear_model import LinearRegression\n",
    "from sklearn.metrics import mean_squared_error\n",
    "from sklearn.model_selection import KFold, cross_val_score\n",
    "from IPython.display import display\n",
    "\n",
    "pd.options.display.max_rows = 100\n",
    "pd.options.mode.chained_assignment = None\n",
    "\n",
    "#Read in dataset\n",
    "houses = pd.read_csv('AmesHousing.tsv', delimiter = '\\t')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Create Functions"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The following functions will be used later in this jupyter notebook when we are running the linear regression to predict housing prices"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "#This function won't modify the dataframe that is passed into it\n",
    "def transform_features(df):\n",
    "    temp_df = df\n",
    "    \n",
    "    #Remove any column with more than 25% of the data missing\n",
    "    null_counts = df.isnull().sum()\n",
    "    non_null_cols = null_counts[null_counts < 0.25*len(df)].index\n",
    "    temp_df = temp_df[non_null_cols]\n",
    "    \n",
    "    #Drop all text columns\n",
    "    text_cols = temp_df.select_dtypes(include = ['object'])\n",
    "    temp_df.drop(text_cols, axis = 1)\n",
    "    \n",
    "    #Drop columns that aren't relevant to our predictive model\n",
    "    temp_df.drop(['Order', 'PID'], axis = 1, inplace = True)\n",
    "    \n",
    "    #Drop remaining null values\n",
    "    temp_df.dropna(inplace = True)\n",
    "    \n",
    "    #Change year columns to include the age of the house and years until the house was remodeled\n",
    "    temp_df['age'] = temp_df['Yr Sold'] - temp_df['Year Built']\n",
    "    temp_df['years_until_remod'] = temp_df['Year Remod/Add'] - temp_df['Year Built']\n",
    "    temp_df.drop(['Yr Sold', 'Year Built', 'Year Remod/Add'], axis = 1, inplace = True)\n",
    "\n",
    "    #The 'Lot Frontage' column has considerably more null values than the other columns, we will remove\n",
    "    temp_df.drop('Lot Frontage', axis = 1, inplace = True)\n",
    "    \n",
    "    return temp_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "def select_features(df, correlation_cutoff = 0.25):\n",
    "    #Generate correlations with target column\n",
    "    corr_matrix = df.corr()\n",
    "    target_corr = abs(corr_matrix['SalePrice'])\n",
    "    target_corr = target_corr[target_corr > correlation_cutoff]\n",
    "    \n",
    "    #Only keep columns that have correlations stronger than the correlation_cutoff parameter\n",
    "    temp_df = df[target_corr.index]\n",
    "    \n",
    "    #Drop target column from dataframe that will be returned\n",
    "    return temp_df.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 98,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "def train_and_test(df, k = 0, correlation_cutoff = 0.25):\n",
    "    cleaned_df = transform_features(df)\n",
    "    features = select_features(cleaned_df, correlation_cutoff)\n",
    "    features = features.tolist()\n",
    "    features.remove('SalePrice')\n",
    "    lr = LinearRegression()\n",
    "\n",
    "    #If k == 0, perform holdout validation\n",
    "    if k == 0:\n",
    "        train = cleaned_df[:1460]\n",
    "        test = cleaned_df[1460:]\n",
    "        \n",
    "        #Run linear regression on training data\n",
    "        lr.fit(train[features], train['SalePrice'])\n",
    "        predictions = lr.predict(test[features])\n",
    "        rmse = np.sqrt(mean_squared_error(predictions, test['SalePrice']))\n",
    "        return rmse\n",
    "    \n",
    "    #If k >= 1, implement k-fold cross validation\n",
    "    if k == 1:\n",
    "        # Randomize *all* rows (frac=1) from `df` and return\n",
    "        train = cleaned_df[:1460]\n",
    "        test = cleaned_df[1460:]\n",
    "        \n",
    "        lr.fit(train[features], train[\"SalePrice\"])\n",
    "        predictions_one = lr.predict(test[features])        \n",
    "        \n",
    "        mse_one = mean_squared_error(test[\"SalePrice\"], predictions_one)\n",
    "        rmse_one = np.sqrt(mse_one)\n",
    "        \n",
    "        lr.fit(test[features], test[\"SalePrice\"])\n",
    "        predictions_two = lr.predict(train[features])        \n",
    "       \n",
    "        mse_two = mean_squared_error(train[\"SalePrice\"], predictions_two)\n",
    "        rmse_two = np.sqrt(mse_two)\n",
    "        \n",
    "        avg_rmse = np.mean([rmse_one, rmse_two])\n",
    "        return avg_rmse\n",
    "    else:\n",
    "        kf = KFold(n_splits = k, shuffle = True)\n",
    "        rmse_values = []\n",
    "        \n",
    "        for train_index, test_index in kf.split(X = cleaned_df):\n",
    "            train = cleaned_df.iloc[train_index]\n",
    "            test = cleaned_df.iloc[test_index]\n",
    "            lr.fit(train[features], train['SalePrice'])\n",
    "            predictions = lr.predict(test[features])\n",
    "            rmse_values.append(np.sqrt(mean_squared_error(predictions, test['SalePrice'])))\n",
    "            \n",
    "        avg_rmse = np.mean(rmse_values)\n",
    "        return avg_rmse"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Train the Model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 106,
   "metadata": {
    "collapsed": false,
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x7fb5fa426fd0>"
      ]
     },
     "execution_count": 106,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\nTkSuQmCC\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7fb5fa3eadd8>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Find root mean squared Error values for multiple k values\n",
    "%matplotlib inline\n",
    "rmse_vals = {}\n",
    "for k_val in range(0,50):\n",
    "    rmse = train_and_test(houses, k = k_val)\n",
    "    rmse_vals[k_val] = rmse\n",
    "    \n",
    "rmse_vals = pd.Series(rmse_vals)\n",
    "rmse_vals.plot(kind = 'line')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "anaconda-cloud": {},
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.4.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
